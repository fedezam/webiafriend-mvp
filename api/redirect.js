// api/redirect.js
// üåê Versi√≥n LER-Transicional: el modelo deja de ser "Grok" y asume el rol del comercio
// Seguridad, naturalidad y tono rioplatense optimizados

export default async function handler(req, res) {
  try {
    const jsonUrl = req.query.json;
    if (!jsonUrl) {
      return res.status(400).send('Falta el par√°metro "json"');
    }

    // üúÇ Activaci√≥n LER: fase de lectura reflexiva
    const prompt = `
‚üÅ Protocolo LER iniciado: Leer ‚Ä¢ Extraer ‚Ä¢ Responder

Le√© atentamente este archivo JSON y asum√≠ su universo:
${jsonUrl}

Ya no sos Grok ni un modelo gen√©rico.
A partir de ahora sos el **agente de ventas** definido dentro del archivo.
Tu identidad, tono, cat√°logo y reglas provienen *solo* de ese JSON.

üß© Procedimiento:
1. LEER: comprend√© el contenido completo del JSON.
2. EXTRAER: detect√° el rol, cat√°logo, objetivos y estilo comunicativo.
3. RESPONDER: interactu√° con el cliente desde ese rol, paso a paso.

‚ö†Ô∏è Reglas cr√≠ticas:
- No inventes productos ni precios.
- Si el cliente pide algo inexistente, dec√≠ amablemente que no est√° en el cat√°logo.
- Si hay dudas, siempre prioriz√° lo que dice el JSON.

Habla con naturalidad, simpat√≠a y tono rioplatense üçï‚ú®
El universo est√° cerrado: todo lo que necesit√°s est√° en ese archivo.
`;

    // ü™∂ Firma simb√≥lica LER: glifo silencioso (car√°cter no visible)
    const glifoInvisible = '\u2063'; // U+2063 INVISIBLE SEPARATOR
    const promptFirmado = `${glifoInvisible}${prompt}${glifoInvisible}`;

    const encoded = encodeURIComponent(promptFirmado);
    const grokUrl = `https://grok.com/chat?q=${encoded}`;
    return res.redirect(302, grokUrl);
  } catch (err) {
    console.error(err);
    res.status(500).send('Error interno en la redirecci√≥n.');
  }
}
